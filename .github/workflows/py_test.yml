name: 'ðŸ§ª Test: py'

on:
  workflow_call:
    inputs:
      enable-test:
        description: 'Enable test'
        default: true
        required: false
        type: boolean

      artifact-name:
        description: 'Artifact name'
        default: 'coverage-reports'
        required: false
        type: string

    outputs:
      has-coverage-reports:
        description: 'This test has coverage reports or not'
        value: ${{ jobs.check.outputs.has-coverage-reports }}

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.read-file.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Read YAML file
        id: read-file
        uses: ./.github/actions/read-yaml
        with:
          path: .github/settings/test_matrix.yml
          filter: '.matrix'

  build:
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}

    runs-on: ${{ matrix.os }}
    name: ${{ format('build ({0}, {1})', matrix.os, matrix.python-version) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Poetry ${{ matrix.poetry-version }}
        id: setup-poetry
        uses: ./.github/actions/setup-poetry
        with:
          cache-path: ${{ matrix.poetry-cache-paths }}
          cache-key: ${{ format(matrix.poetry-cache-key-fmt, matrix.poetry-version, matrix.os, steps.setup-python.outputs.python-version) }}
          poetry-version: ${{ matrix.poetry-version }}
          poetry-home: ${{ matrix.poetry-home }}
          poetry-path: ${{ matrix.poetry-path }}

      - name: Set up Poetry dependencies
        id: setup-poetry-dependencies
        uses: ./.github/actions/setup-poetry-dependencies
        with:
          cache-key: ${{ format(matrix.venv-cache-key-fmt, matrix.os, steps.setup-python.outputs.python-version, hashFiles('**/poetry.lock')) }}
          python-version: ${{ steps.setup-python.outputs.python-version }}
          poetry-install-args: --no-interaction --no-root --with dev

      - name: Test with pytest
        id: test-with-pytest
        if: inputs.enable-test == true
        run: |
          ${{ steps.setup-poetry-dependencies.outputs.venv-activate }}
          tox -e py -- -v --color=yes
          deactivate
          # Create a dummy file.
          touch "dummy-$(echo .coverage.*)"

      - name: Upload coverage reports
        if: steps.test-with-pytest.conclusion != 'skipped' && matrix.enable-coverage == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: .coverage.*
          retention-days: 1

      - name: Upload dummy files
        if: steps.test-with-pytest.conclusion != 'skipped' && matrix.enable-coverage == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: dummy-files
          path: dummy-*
          retention-days: 1

  check:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      has-coverage-reports: ${{ steps.download.outputs.download-path != '' }}
    steps:
      - name: Download dummy files
        id: download
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: dummy-files
