name: 'ðŸ“¦ Publish the package to PyPI'

on:
  workflow_call:
    inputs:
      use-testpypi:
        required: false
        default: true
        type: boolean

      dry-run:
        required: false
        default: true
        type: boolean

    secrets:
      pypi-api-token:
        required: true

    outputs:
      page-url:
        description: 'URL to the package published on PyPI'
        value: ${{ jobs.make-url.outputs.page-url }}

jobs:
  config-prep:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.read-file.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Read YAML file
        id: read-file
        uses: ./.github/actions/read-yaml
        with:
          path: .github/settings/config.yml
          filter: '.default.env'

  deploy:
    needs: config-prep
    env: ${{ fromJson(needs.config-prep.outputs.env) }}

    runs-on: ubuntu-latest
    outputs:
      api-end-point: ${{ steps.configure-poetry.outputs.api-end-point }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}

      - name: Set up Poetry ${{ env.poetry-version }}
        id: setup-poetry
        uses: ./.github/actions/setup-poetry
        with:
          cache-path: ${{ env.poetry-cache-paths }}
          cache-key: ${{ format(env.poetry-cache-key-fmt, env.poetry-version, runner.os, steps.setup-python.outputs.python-version) }}
          poetry-version: ${{ env.poetry-version }}
          poetry-home: ${{ env.poetry-home }}
          poetry-path: ${{ env.poetry-path }}

      - name: Configure Poetry for TestPyPI
        if: inputs.use-testpypi
        id: configure-poetry
        env:
          PYPI_API_TOKEN: ${{ secrets.pypi-api-token }}
        shell: bash
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi $PYPI_API_TOKEN
          echo "api-end-point=$(poetry config repositories.test-pypi | sed 's/\x27/"/g' | jq '.url' | sed 's/"//g')" >> $GITHUB_OUTPUT

      - name: Configure Poetry for PyPI
        if: ${{ ! inputs.use-testpypi }}
        env:
          PYPI_API_TOKEN: ${{ secrets.pypi-api-token }}
        shell: bash
        run: |
          poetry config pypi-token.pypi $PYPI_API_TOKEN

      - name: Install dependencies
        run: |
          poetry self add 'poetry-dynamic-versioning[plugin]'

      - name: Make options
        id: make-options
        shell: bash
        run: |
          options='--build'
          if [[ ${{ inputs.use-testpypi }} == true ]]; then
            options="${options} -r test-pypi"
          fi
          if [[ ${{ inputs.dry-run }} == true ]]; then
            options="${options} --dry-run"
          fi
          echo "options=$(echo "${options}" | sed 's/^ *\| *$//g')" >> $GITHUB_OUTPUT

      - name: Publish
        run: |
          poetry publish ${{ steps.make-options.outputs.options }}

  make-url:
    needs: deploy
    runs-on: ubuntu-latest
    outputs:
      page-url: ${{ steps.make-url.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Read TOML file
        uses: SebRollen/toml-action@v1.0.2
        id: read-toml
        with:
          file: pyproject.toml
          field: 'tool.poetry.name'

      - name: Make URL
        id: make-url
        shell: bash
        run: |
          if [[ ${{ inputs.use-testpypi }} == true ]]; then
            api_end_point='${{ needs.deploy.outputs.api-end-point }}'
            protocol_domain="$(echo "${api_end_point}" | grep -Eo '^http[s]?://[^/]+')/"
            echo "url=${protocol_domain}project/${{ steps.read-toml.outputs.value }}/" >> $GITHUB_OUTPUT
          else
            echo "url=https://pypi.org/project/${{ steps.read-toml.outputs.value }}/" >> $GITHUB_OUTPUT
          fi
